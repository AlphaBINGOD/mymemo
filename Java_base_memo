JavaSE基础学习笔记

一、java程序运行机制

					      编译						        解释
	Java源文件(.java) -----------> 字节码文件（.class） -----------> 特定平台机器码


二、Java程序的基本规则

	1.要被解释器直接解释执行的类，必须包含public static void main(String[] args){}，这是程序入口；
	2.源文件名必须与该文件下的public类同名，每个源文件有且只有一个public修饰的类；

三、java的内存模型


四、Java的变量类型


																  +----->整数类型（byte(1)，short(2)，int(4)，long(8)，char(2)）
																  |
											 +----->数值类型----->|
											 |					  |
						+----->基本类型----->|					  +----->浮点类型（float(4)，double(8)）
						|					 |
						|					 +----->boolean类型（true/false）
	Java变量模型 -----> |	
						|
						|
						+----->引用类型（类、接口、数组）

	1.默认的整数类型是int，默认的浮点数类型是double。注意以下声明：long number = 3L;  float number = 3.14F； 
	2.自动类型转换：小数赋给大范围变量；
	3.强制类型转换：大数赋给小范围变量，因为是一种数据截取，这样做非常容易导致丢失精度。
	4.一个表达式中包含多个基本数据类型时，表达式的类型将严格保持与表达式中最高等级操作数相同的类型；

	**果使用过字符串直接量，那么这个字符串直接量就会缓存到常量池中，Java保证每个字符串常量只会有一个，不会产生多个副本。

六、数组

	1.定义数组（定义数组时，不能指定长度）
	例如： int[] array;

	2.数组初始化方式
		静态初始化：int[] array = new int[]{""."",...};   或者简化写法   int[] array = {"","",...};
		动态初始化：int[] array = new int[5];  
			其实动态初始化就是定义数组时同时让系统自动初始化了数组，动态初始化后，具有默认初始值；
			注意以下动态初始化：Object[] books = new String[5]; 也是可以的，只要是声明类型的子类即可；
	
	3.foreach循环（可以用来遍历数组，或者集合类）
		使用foreach循环遍历数组和集合元素时，无需循环条件，无需获得具体长度，无需索引，foreach循环会自动遍历每个元素。
		即使修改foreach中的循环变量，也不能改变原来数组的值，这个循环变量是对每个元素值临时的一个拷贝而已。

	4.Java提供的工具类：java.util.Arrays，通过它，我们可以更轻松的使用数组。
		一些常用的类方法（static）：
			String toString(type[] a) : 将一个数组转换为一个字符串；

七、面向对象

	面向对象的三大特征：封装、继承、多态；

	static修饰符的真正作用：区分成员变量、方法、内部类、初始化块这四种成员的归属，属于类的成员由static修饰，否则属于具体实例；

	+-----------------------------------------------------------------------------------------------------------+
	类与对象

	1.类名规范：每个单词首字母大写；
	2.创建对象的根本途径是构造器，new关键字的作用调用构造器；
	3.Java类中的成员：变量，构造器，方法，代码块，内部类；
	4.每个类只能继承一个直接父类；

	+-----------------------------------------------------------------------------------------------------------+
	代码块
	
	1.代码块的作用：主要是将多个构造函数中相同的部分抽出来，减少代码的重复；
	2.代码块的分类：类初始化块（static，属于类）、普通初始化块；
	3.代码块先于构造器执行；
	4.类初始化代码块在类初始化阶段进行；整个程序运行过程中，类初始化块只需进行一次；
	5.普通代码初始化块在实例化阶段进行；每次实例化都需要进行一次初始化；

	+-----------------------------------------------------------------------------------------------------------+
	构造器

	1.构造器是实例化对象的根本方式，new关键字的作用就是调用构造器；
	2.默认自带一个无参且什么都不做的构造器，如果已经有了其他构造器，Java就不提供这个构造器了，需要自行添加无参构造器。
	3.构造器支持重载；
	4.构造器中可以用来初始化其他成员变量；
	5.子类不会获得父类的构造器，但是子类在调用自己的构造器的时候，都会默认调用父类构造器，这样才能顺利地构造出整个子类对象；
	6.子类在显式调用父类构造器的时候，需要将super语句放在构造器第一行；

	+-----------------------------------------------------------------------------------------------------------+
	成员变量与局部变量

									   +----->类变量（sataic修饰）
									   |
				  +----->成员变量----->|
				  |					   |
				  |					   +----->实例变量（无static修饰）
	所有变量----->|
				  |					   +----->形参（方法签名中定义）
				  |					   |
				  +----->局部变量----->|----->方法局部变量（方法内定义）
				  					   |
				  					   +----->代码块局部变量（代码块内定义）

	+------------------------------------------------------------------------------------------------------------+
	方法

	1.方法重载：同一个类中，参数列表不同，方法名相同的方法；
	2.方法重写：继承或实现中，子类包含有父类同名的方法；
	重写其实我更喜欢叫覆写，重载和重写的关系，其实两者没有任何关系，只是名字有点相似，都需要名字相同。

	+-------------------------------------------------------------------------------------------------------------+
	内部类

	内部类指的是一个类的定义在另一个类的类体部分；

	1.作用：a.更好的封装；b.可以直接访问外部类的私有数据；c.匿名内部类适用于创建只使用一次的类；

									     +----->非静态成员内部类
									     |
				+----->成员内部类------->|
				|					     |
				|					     +----->静态成员内部类（static）
				|					   
	2.分类----->|					   	 +----->局部内部类（方法内的类）
				|						 |
				+----->非成员内部类----->|
										 |
										 +----->匿名内部类（一般只使用一次）


	3.各种内部类的特别之处

		非静态成员内部类：
			依赖于外部类实例，才可以实例化：  OuterClass.InnerClass var = OuterClassInstance.new InnerClass();
			（内->外）不同名的属性或方法的时候，直接使用
			（内->外）使用与外部类同名的方法或者属性（注意只能在内部类内部使用）： OuterClass.this.field;
			（外->内）外部实例化内部类访问外部类属性或方法： 在外部类中实例化一个内部类

		静态成员内部类：
			不依赖外部类对象，可以直接实例化：OuterClass.InnerClass var = new OuterClass.InnerClass();

		局部内部类（鸡肋，甚少使用）：
			方法中的参数想要被方法中的局部内部类访问，形参列表必须添加final关键字修饰。因为要保证变量修改的一致性。

		匿名内部类：

	+-------------------------------------------------------------------------------------------------------------+

八、抽象类

	主要作为子类的一种模板，避免子类设计的随意性。

	规则：
	1.抽象类与抽象方法必须abstract修饰，同时抽象方法不包含实现；
	2.抽象类不能被实例化，抽象类的构造器不能用于构造实例，构造器主要用于子类调用；	
	3.有一个抽象方法的类就是抽象类；

九、接口（基于java 8）
	
	比抽象类更抽象的类，就是接口；接口在java 8中有所改进，这里以java 8中接口特性为依据。

	特性：
	1.一个类可以同时实现多个接口，实现使用关键字 implements
	2.Java 8 允许接口中有默认方法，该方法必须使用default修饰，不允许static修饰，同时默认是public；
	3.Java 8 允许接口中定义类方法，必须使用static修饰，不允许使用default，可以直接调用；
	4.接口中的类成员变量默认为 public static final，是静态常量；
	5.接口内不包含构造器；
	6.接口不包含初始化块；